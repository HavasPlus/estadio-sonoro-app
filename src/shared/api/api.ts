/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Viper Mock API
 * The Viper Mock API, provided for the Viper front end team so they can develop without having to wait for slow back end developers. ;)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";


const BASE_PATH = '';

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|"
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError" = "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface AddressInfo
 */
export interface AddressInfo {
  /**
   *
   * @type {string}
   * @memberof AddressInfo
   */
  shopName: string;
  /**
   *
   * @type {string}
   * @memberof AddressInfo
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof AddressInfo
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof AddressInfo
   */
  postalCode: string;
  /**
   *
   * @type {number}
   * @memberof AddressInfo
   */
  houseNumber: number;
}

/**
 *
 * @export
 * @interface Author
 */
export interface Author {
  /**
   *
   * @type {string}
   * @memberof Author
   */
  iconURL: string;
  /**
   *
   * @type {string}
   * @memberof Author
   */
  displayName: string;
  /**
   *
   * @type {string}
   * @memberof Author
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Author
   */
  date: string;
  /**
   *
   * @type {string}
   * @memberof Author
   */
  profileURL: string;
}

/**
 *
 * @export
 * @interface B2BDataTab
 */
export interface B2BDataTab {
  /**
   *
   * @type {string}
   * @memberof B2BDataTab
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof B2BDataTab
   */
  content: string;
  /**
   *
   * @type {Array&lt;TabInformation&gt;}
   * @memberof B2BDataTab
   */
  tabInformation: Array<TabInformation>;
  /**
   *
   * @type {string}
   * @memberof B2BDataTab
   */
  downloadTitle: string;
  /**
   *
   * @type {string}
   * @memberof B2BDataTab
   */
  downloadContent: string;
  /**
   *
   * @type {Array&lt;Link&gt;}
   * @memberof B2BDataTab
   */
  downloadLinks: Array<Link>;
}

/**
 *
 * @export
 * @interface Background
 */
export interface Background {
  /**
   *
   * @type {string}
   * @memberof Background
   */
  backgroundPattern?: string;
  /**
   *
   * @type {string}
   * @memberof Background
   */
  backgroundColour?: string;
}

/**
 *
 * @export
 * @interface BodyTextExpandedModule
 */
export interface BodyTextExpandedModule {
  /**
   *
   * @type {string}
   * @memberof BodyTextExpandedModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextExpandedModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextExpandedModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextExpandedModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof BodyTextExpandedModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof BodyTextExpandedModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof BodyTextExpandedModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof BodyTextExpandedModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof BodyTextExpandedModule
   */
  html: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextExpandedModule
   */
  containerSize: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextExpandedModule
   */
  containerAlignment: string;
  /**
   *
   * @type {Author}
   * @memberof BodyTextExpandedModule
   */
  author: Author;
  /**
   *
   * @type {ShareSocialMediaButtons}
   * @memberof BodyTextExpandedModule
   */
  socialMediaButtons: ShareSocialMediaButtons;
}

/**
 *
 * @export
 * @interface BodyTextModule
 */
export interface BodyTextModule {
  /**
   *
   * @type {string}
   * @memberof BodyTextModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof BodyTextModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof BodyTextModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof BodyTextModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof BodyTextModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof BodyTextModule
   */
  html: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextModule
   */
  containerSize: string;
  /**
   *
   * @type {string}
   * @memberof BodyTextModule
   */
  containerAlignment: string;
}

/**
 *
 * @export
 * @interface BusinessOverviewCategoriesState
 */
export interface BusinessOverviewCategoriesState {
  /**
   *
   * @type {Array&lt;BusinessOverviewCategory&gt;}
   * @memberof BusinessOverviewCategoriesState
   */
  paginatedCategories: Array<BusinessOverviewCategory>;
  /**
   *
   * @type {number}
   * @memberof BusinessOverviewCategoriesState
   */
  totalCategories: number;
}

/**
 *
 * @export
 * @interface BusinessOverviewCategory
 */
export interface BusinessOverviewCategory {
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewCategory
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewCategory
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewCategory
   */
  pictureURL: string;
  /**
   *
   * @type {BusinessOverviewLinks}
   * @memberof BusinessOverviewCategory
   */
  links: BusinessOverviewLinks;
}

/**
 *
 * @export
 * @interface BusinessOverviewLinks
 */
export interface BusinessOverviewLinks {
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewLinks
   */
  downloadAlleZip: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewLinks
   */
  downloadAlleVideos: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewLinks
   */
  downloadAlleProductInfo: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewLinks
   */
  downloadAlleProductPhoto: string;
}

/**
 *
 * @export
 * @interface BusinessOverviewModule
 */
export interface BusinessOverviewModule {
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof BusinessOverviewModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof BusinessOverviewModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof BusinessOverviewModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof BusinessOverviewModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;BusinessOverviewProductLine&gt;}
   * @memberof BusinessOverviewModule
   */
  productLineList: Array<BusinessOverviewProductLine>;
  /**
   *
   * @type {Array&lt;BusinessOverviewCategory&gt;}
   * @memberof BusinessOverviewModule
   */
  categoryList: Array<BusinessOverviewCategory>;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewModule
   */
  sidebarTitle: string;
  /**
   *
   * @type {number}
   * @memberof BusinessOverviewModule
   */
  totalCategories: number;
  /**
   *
   * @type {number}
   * @memberof BusinessOverviewModule
   */
  totalProducts: number;
}

/**
 *
 * @export
 * @interface BusinessOverviewProduct
 */
export interface BusinessOverviewProduct {
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewProduct
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewProduct
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewProduct
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewProduct
   */
  pictureURL: string;
  /**
   *
   * @type {BusinessOverviewLinks}
   * @memberof BusinessOverviewProduct
   */
  links: BusinessOverviewLinks;
}

/**
 *
 * @export
 * @interface BusinessOverviewProductLine
 */
export interface BusinessOverviewProductLine {
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewProductLine
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BusinessOverviewProductLine
   */
  id: string;
  /**
   *
   * @type {BusinessOverviewLinks}
   * @memberof BusinessOverviewProductLine
   */
  links: BusinessOverviewLinks;
}

/**
 *
 * @export
 * @interface BusinessOverviewProductsState
 */
export interface BusinessOverviewProductsState {
  /**
   *
   * @type {Array&lt;BusinessOverviewProduct&gt;}
   * @memberof BusinessOverviewProductsState
   */
  paginatedProductList: Array<BusinessOverviewProduct>;
  /**
   *
   * @type {number}
   * @memberof BusinessOverviewProductsState
   */
  totalProducts: number;
}

/**
 *
 * @export
 * @interface CTAButton
 */
export interface CTAButton {
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  variant: string;
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  href: string;
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  target: string;
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  icon: string;
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  onClick: string;
  /**
   *
   * @type {string}
   * @memberof CTAButton
   */
  location: string;
}

/**
 *
 * @export
 * @interface CTAModule
 */
export interface CTAModule {
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof CTAModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof CTAModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof CTAModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof CTAModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  titleText: string;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  bodyText: string;
  /**
   *
   * @type {Array&lt;CTAButton&gt;}
   * @memberof CTAModule
   */
  buttons: Array<CTAButton>;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  imageURL: string;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  containerAlignment: string;
  /**
   *
   * @type {string}
   * @memberof CTAModule
   */
  contentAlignment: string;
}

/**
 *
 * @export
 * @interface CardLabel
 */
export interface CardLabel {
  /**
   *
   * @type {string}
   * @memberof CardLabel
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CardLabel
   */
  icon: string;
}

/**
 *
 * @export
 * @interface CardModel
 */
export interface CardModel {
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof CardModel
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof CardModel
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof CardModel
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof CardModel
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Image}
   * @memberof CardModel
   */
  picture: Image;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  categoryDetail: string;
  /**
   *
   * @type {Array&lt;CardLabel&gt;}
   * @memberof CardModel
   */
  cardLabels: Array<CardLabel>;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  buttonText: string;
  /**
   *
   * @type {string}
   * @memberof CardModel
   */
  URL: string;
}

/**
 *
 * @export
 * @interface CategoryCard
 */
export interface CategoryCard {
  /**
   *
   * @type {string}
   * @memberof CategoryCard
   */
  link: string;
  /**
   *
   * @type {string}
   * @memberof CategoryCard
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CategoryCard
   */
  buttonText: string;
  /**
   *
   * @type {string}
   * @memberof CategoryCard
   */
  category: string;
}

/**
 *
 * @export
 * @interface ContactForm
 */
export interface ContactForm {
  /**
   *
   * @type {string}
   * @memberof ContactForm
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof ContactForm
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ContactForm
   */
  privacyText: string;
  /**
   *
   * @type {string}
   * @memberof ContactForm
   */
  privacyLink: string;
  /**
   *
   * @type {Placeholder}
   * @memberof ContactForm
   */
  placeholderField: Placeholder;
}

/**
 *
 * @export
 * @interface ContactModule
 */
export interface ContactModule {
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof ContactModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof ContactModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof ContactModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof ContactModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  subtitleContactAddress: string;
  /**
   *
   * @type {AddressInfo}
   * @memberof ContactModule
   */
  contactAddressInfo: AddressInfo;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  mailingAddress: string;
  /**
   *
   * @type {AddressInfo}
   * @memberof ContactModule
   */
  mailingAddressInfo: AddressInfo;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  phone: string;
  /**
   *
   * @type {Phone}
   * @memberof ContactModule
   */
  generalAndSales: Phone;
  /**
   *
   * @type {Phone}
   * @memberof ContactModule
   */
  marketing: Phone;
  /**
   *
   * @type {Phone}
   * @memberof ContactModule
   */
  customerService: Phone;
  /**
   *
   * @type {Phone}
   * @memberof ContactModule
   */
  fax: Phone;
  /**
   *
   * @type {string}
   * @memberof ContactModule
   */
  directContact: string;
  /**
   *
   * @type {ContactForm}
   * @memberof ContactModule
   */
  contactForm: ContactForm;
}

/**
 *
 * @export
 * @interface Curve
 */
export interface Curve {
  /**
   *
   * @type {string}
   * @memberof Curve
   */
  decorCurveVerticalAlignment?: string;
  /**
   *
   * @type {string}
   * @memberof Curve
   */
  decorCurveHorizontalAlignment?: string;
  /**
   *
   * @type {Background}
   * @memberof Curve
   */
  curveBackground?: Background;
}

/**
 *
 * @export
 * @interface DummyModel
 */
export interface DummyModel {
  /**
   *
   * @type {string}
   * @memberof DummyModel
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof DummyModel
   */
  description: string;
  /**
   *
   * @type {Array&lt;WordPressPostModule&gt;}
   * @memberof DummyModel
   */
  wordPressPostModules: Array<WordPressPostModule>;
  /**
   *
   * @type {NavBarModule}
   * @memberof DummyModel
   */
  playgroundModule: NavBarModule;
  /**
   *
   * @type {CTAModule}
   * @memberof DummyModel
   */
  ctaModule: CTAModule;
  /**
   *
   * @type {FooterModule}
   * @memberof DummyModel
   */
  footerModule: FooterModule;
  /**
   *
   * @type {LikeSocialMediaButtons}
   * @memberof DummyModel
   */
  likeMediaButtons: LikeSocialMediaButtons;
  /**
   *
   * @type {ShareSocialMediaButtons}
   * @memberof DummyModel
   */
  shareMediaButtons: ShareSocialMediaButtons;
  /**
   *
   * @type {BusinessOverviewProductsState}
   * @memberof DummyModel
   */
  businessOverviewProductsReturn: BusinessOverviewProductsState;
  /**
   *
   * @type {BusinessOverviewCategoriesState}
   * @memberof DummyModel
   */
  businessOverviewCategoriesReturn: BusinessOverviewCategoriesState;
  /**
   *
   * @type {NavBarModule}
   * @memberof DummyModel
   */
  navBarModule: NavBarModule;
  /**
   *
   * @type {InfoHeaderModule}
   * @memberof DummyModel
   */
  infoHeaderModule: InfoHeaderModule;
  /**
   *
   * @type {BodyTextModule}
   * @memberof DummyModel
   */
  bodyTextModule: BodyTextModule;
  /**
   *
   * @type {BusinessOverviewModule}
   * @memberof DummyModel
   */
  businessOverviewModule: BusinessOverviewModule;
  /**
   *
   * @type {GallerySliderModule}
   * @memberof DummyModel
   */
  gallerySliderModule: GallerySliderModule;
  /**
   *
   * @type {RelatedProductsSlider}
   * @memberof DummyModel
   */
  relatedProductsSlider: RelatedProductsSlider;
  /**
   *
   * @type {WelcomeModule}
   * @memberof DummyModel
   */
  welcomeModule: WelcomeModule;
  /**
   *
   * @type {InstagramWalllModule}
   * @memberof DummyModel
   */
  InstagramWalllModule: InstagramWalllModule;
  /**
   *
   * @type {FeaturedItemModule}
   * @memberof DummyModel
   */
  FeaturedItemModule: FeaturedItemModule;
  /**
   *
   * @type {ItemOverviewModule}
   * @memberof DummyModel
   */
  itemOverviewModule: ItemOverviewModule;
  /**
   *
   * @type {NotFoundModule}
   * @memberof DummyModel
   */
  notFoundModule: NotFoundModule;
  /**
   *
   * @type {NewsOverviewModule}
   * @memberof DummyModel
   */
  newsOverviewModule: NewsOverviewModule;
  /**
   *
   * @type {CardModel}
   * @memberof DummyModel
   */
  card: CardModel;
  /**
   *
   * @type {ItemOverviewStateModule}
   * @memberof DummyModel
   */
  itemOverviewStateModule: ItemOverviewStateModule;
  /**
   *
   * @type {NewsOverviewStateModule}
   * @memberof DummyModel
   */
  newsOverviewStateModule: NewsOverviewStateModule;
  /**
   *
   * @type {HowToModel}
   * @memberof DummyModel
   */
  howTo: HowToModel;
  /**
   *
   * @type {IngredientModel}
   * @memberof DummyModel
   */
  ingredientModel: IngredientModel;
  /**
   *
   * @type {ItemRecipeInfo}
   * @memberof DummyModel
   */
  itemRecipeInfo: ItemRecipeInfo;
  /**
   *
   * @type {RecipeDetailModule}
   * @memberof DummyModel
   */
  recipeDetailModule: RecipeDetailModule;
  /**
   *
   * @type {RecipeHeadCard}
   * @memberof DummyModel
   */
  recipeHeadCard: RecipeHeadCard;
  /**
   *
   * @type {RelatedProduct}
   * @memberof DummyModel
   */
  relatedProduct: RelatedProduct;
  /**
   *
   * @type {SalePointModule}
   * @memberof DummyModel
   */
  salePointModule: SalePointModule;
  /**
   *
   * @type {OurTeamModule}
   * @memberof DummyModel
   */
  ourTeamModule: OurTeamModule;
  /**
   *
   * @type {ContactModule}
   * @memberof DummyModel
   */
  contactModule: ContactModule;
  /**
   *
   * @type {BodyTextExpandedModule}
   * @memberof DummyModel
   */
  bodyTextExpandedModule: BodyTextExpandedModule;
  /**
   *
   * @type {NotYetImplemented}
   * @memberof DummyModel
   */
  notYetImplemented: NotYetImplemented;
  /**
   *
   * @type {ToggleModule}
   * @memberof DummyModel
   */
  toggleModule: ToggleModule;
  /**
   *
   * @type {ExpandablePanel}
   * @memberof DummyModel
   */
  expandablePanel: ExpandablePanel;
  /**
   *
   * @type {NewsletterModule}
   * @memberof DummyModel
   */
  newsletterModule: NewsletterModule;
  /**
   *
   * @type {NavbarSearchCategory}
   * @memberof DummyModel
   */
  navbarSearchCategory: NavbarSearchCategory;
  /**
   *
   * @type {NavbarSearchItem}
   * @memberof DummyModel
   */
  navbarSearchItem: NavbarSearchItem;
  /**
   *
   * @type {FAQOverviewModule}
   * @memberof DummyModel
   */
  faqOverviewModule: FAQOverviewModule;
  /**
   *
   * @type {TabsModule}
   * @memberof DummyModel
   */
  tabs: TabsModule;
  /**
   *
   * @type {ProductLineOverviewModule}
   * @memberof DummyModel
   */
  productLineReturn: ProductLineOverviewModule;
  /**
   *
   * @type {MoreProducts}
   * @memberof DummyModel
   */
  moreProducts: MoreProducts;
  /**
   *
   * @type {ProductDetailHeader}
   * @memberof DummyModel
   */
  productDetailHeader: ProductDetailHeader;
  /**
   *
   * @type {ProductLineOverviewCard}
   * @memberof DummyModel
   */
  productLineOverviewModel: ProductLineOverviewCard;
  /**
   *
   * @type {SignUpModule}
   * @memberof DummyModel
   */
  signUpModule: SignUpModule;
  /**
   *
   * @type {ProductLineOverviewModule}
   * @memberof DummyModel
   */
  productLineStoryOverviewModule: ProductLineOverviewModule;
  /**
   *
   * @type {ContactForm}
   * @memberof DummyModel
   */
  ContactForm: ContactForm;
  /**
   *
   * @type {RelatedLinksModule}
   * @memberof DummyModel
   */
  relatedLinksModule: RelatedLinksModule;
  /**
   *
   * @type {LoginModule}
   * @memberof DummyModel
   */
  loginModule: LoginModule;
  /**
   *
   * @type {ProductLineSingleModule}
   * @memberof DummyModel
   */
  productLineSingleModule: ProductLineSingleModule;
  /**
   *
   * @type {ProductOverviewSimpleModule}
   * @memberof DummyModel
   */
  productOverviewSimpleModule: ProductOverviewSimpleModule;
}

/**
 *
 * @export
 * @interface ExpandablePanel
 */
export interface ExpandablePanel {
  /**
   *
   * @type {string}
   * @memberof ExpandablePanel
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ExpandablePanel
   */
  content: string;
}

/**
 *
 * @export
 * @interface FAQOverviewModule
 */
export interface FAQOverviewModule {
  /**
   *
   * @type {string}
   * @memberof FAQOverviewModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof FAQOverviewModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof FAQOverviewModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof FAQOverviewModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof FAQOverviewModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof FAQOverviewModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof FAQOverviewModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof FAQOverviewModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;Toggle&gt;}
   * @memberof FAQOverviewModule
   */
  groups: Array<Toggle>;
  /**
   *
   * @type {string}
   * @memberof FAQOverviewModule
   */
  sidebarTitle: string;
}

/**
 *
 * @export
 * @interface FeaturedItemModule
 */
export interface FeaturedItemModule {
  /**
   *
   * @type {string}
   * @memberof FeaturedItemModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof FeaturedItemModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof FeaturedItemModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof FeaturedItemModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof FeaturedItemModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof FeaturedItemModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof FeaturedItemModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof FeaturedItemModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;Recipe&gt;}
   * @memberof FeaturedItemModule
   */
  recipes: Array<Recipe>;
  /**
   *
   * @type {string}
   * @memberof FeaturedItemModule
   */
  title: string;
  /**
   *
   * @type {Link}
   * @memberof FeaturedItemModule
   */
  button: Link;
}

/**
 *
 * @export
 * @interface FilterOptions
 */
export interface FilterOptions {
  /**
   *
   * @type {string}
   * @memberof FilterOptions
   */
  content: string;
  /**
   *
   * @type {any}
   * @memberof FilterOptions
   */
  value: any;
  /**
   *
   * @type {number}
   * @memberof FilterOptions
   */
  id: number;
}

/**
 *
 * @export
 * @interface FooterModule
 */
export interface FooterModule {
  /**
   *
   * @type {string}
   * @memberof FooterModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof FooterModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof FooterModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof FooterModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof FooterModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof FooterModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof FooterModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof FooterModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;FooterSection&gt;}
   * @memberof FooterModule
   */
  footerSections: Array<FooterSection>;
  /**
   *
   * @type {Array&lt;Link&gt;}
   * @memberof FooterModule
   */
  footerLinks: Array<Link>;
  /**
   *
   * @type {string}
   * @memberof FooterModule
   */
  logo: string;
  /**
   *
   * @type {LikeSocialMediaButtons}
   * @memberof FooterModule
   */
  likeSocialMedia: LikeSocialMediaButtons;
}

/**
 *
 * @export
 * @interface FooterSection
 */
export interface FooterSection {
  /**
   *
   * @type {string}
   * @memberof FooterSection
   */
  title: string;
  /**
   *
   * @type {Array&lt;Link&gt;}
   * @memberof FooterSection
   */
  links: Array<Link>;
}

/**
 *
 * @export
 * @interface GallerySliderModule
 */
export interface GallerySliderModule {
  /**
   *
   * @type {string}
   * @memberof GallerySliderModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof GallerySliderModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof GallerySliderModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof GallerySliderModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof GallerySliderModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof GallerySliderModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof GallerySliderModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof GallerySliderModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;ModalImage&gt;}
   * @memberof GallerySliderModule
   */
  modalImage: Array<ModalImage>;
}

/**
 *
 * @export
 * @interface HowToModel
 */
export interface HowToModel {
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof HowToModel
   */
  steps: Array<string>;
  /**
   *
   * @type {string}
   * @memberof HowToModel
   */
  extraText: string;
}

/**
 *
 * @export
 * @interface IconLabel
 */
export interface IconLabel {
  /**
   *
   * @type {string}
   * @memberof IconLabel
   */
  icon: string;
  /**
   *
   * @type {string}
   * @memberof IconLabel
   */
  label: string;
}

/**
 *
 * @export
 * @interface Image
 */
export interface Image {
  /**
   *
   * @type {string}
   * @memberof Image
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof Image
   */
  alt: string;
}

/**
 *
 * @export
 * @interface ImageButton
 */
export interface ImageButton {
  /**
   *
   * @type {number}
   * @memberof ImageButton
   */
  buttonType: number;
  /**
   *
   * @type {string}
   * @memberof ImageButton
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof ImageButton
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof ImageButton
   */
  route: string;
}

/**
 *
 * @export
 * @interface ImageLink
 */
export interface ImageLink {
  /**
   *
   * @type {string}
   * @memberof ImageLink
   */
  logo: string;
  /**
   *
   * @type {string}
   * @memberof ImageLink
   */
  tooltip: string;
  /**
   *
   * @type {string}
   * @memberof ImageLink
   */
  url: string;
}

/**
 *
 * @export
 * @interface InfoHeaderModule
 */
export interface InfoHeaderModule {
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof InfoHeaderModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof InfoHeaderModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof InfoHeaderModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof InfoHeaderModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  titleText: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  bodyText: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  backButtonText: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  backButtonURL: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  imageURL: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  htmlArea: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  align: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  imageAlign: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  bgcolor: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  buttonLinkText: string;
  /**
   *
   * @type {string}
   * @memberof InfoHeaderModule
   */
  buttonLinkURL: string;
}

/**
 *
 * @export
 * @interface IngredientModel
 */
export interface IngredientModel {
  /**
   *
   * @type {string}
   * @memberof IngredientModel
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof IngredientModel
   */
  amount: string;
}

/**
 *
 * @export
 * @interface InstagramWalllModule
 */
export interface InstagramWalllModule {
  /**
   *
   * @type {string}
   * @memberof InstagramWalllModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof InstagramWalllModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof InstagramWalllModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof InstagramWalllModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof InstagramWalllModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof InstagramWalllModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof InstagramWalllModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof InstagramWalllModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;IntagramPosts&gt;}
   * @memberof InstagramWalllModule
   */
  posts: Array<IntagramPosts>;
  /**
   *
   * @type {string}
   * @memberof InstagramWalllModule
   */
  title: string;
}

/**
 *
 * @export
 * @interface IntagramPosts
 */
export interface IntagramPosts {
  /**
   *
   * @type {string}
   * @memberof IntagramPosts
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof IntagramPosts
   */
  title: string;
}

/**
 *
 * @export
 * @interface ItemOverviewModule
 */
export interface ItemOverviewModule {
  /**
   *
   * @type {string}
   * @memberof ItemOverviewModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ItemOverviewModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ItemOverviewModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof ItemOverviewModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof ItemOverviewModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof ItemOverviewModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof ItemOverviewModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof ItemOverviewModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {ItemOverviewStateModule}
   * @memberof ItemOverviewModule
   */
  state: ItemOverviewStateModule;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof ItemOverviewModule
   */
  categories: Array<string>;
}

/**
 *
 * @export
 * @interface ItemOverviewStateModule
 */
export interface ItemOverviewStateModule {
  /**
   *
   * @type {Array&lt;CardModel&gt;}
   * @memberof ItemOverviewStateModule
   */
  cards: Array<CardModel>;
  /**
   *
   * @type {number}
   * @memberof ItemOverviewStateModule
   */
  totalItems: number;
}

/**
 *
 * @export
 * @interface ItemRecipeInfo
 */
export interface ItemRecipeInfo {
  /**
   *
   * @type {string}
   * @memberof ItemRecipeInfo
   */
  text: string;
  /**
   *
   * @type {string}
   * @memberof ItemRecipeInfo
   */
  icon: string;
}

/**
 *
 * @export
 * @interface LikeSocialMediaButtons
 */
export interface LikeSocialMediaButtons {
  /**
   *
   * @type {string}
   * @memberof LikeSocialMediaButtons
   */
  facebook?: string;
  /**
   *
   * @type {string}
   * @memberof LikeSocialMediaButtons
   */
  linkedin?: string;
  /**
   *
   * @type {string}
   * @memberof LikeSocialMediaButtons
   */
  instagram?: string;
  /**
   *
   * @type {string}
   * @memberof LikeSocialMediaButtons
   */
  pinterest?: string;
  /**
   *
   * @type {string}
   * @memberof LikeSocialMediaButtons
   */
  twitter?: string;
  /**
   *
   * @type {string}
   * @memberof LikeSocialMediaButtons
   */
  youtube?: string;
}

/**
 *
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {string}
   * @memberof Link
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  route: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  color?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  hoverColor?: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  icon?: string;
}

/**
 *
 * @export
 * @interface LoginModule
 */
export interface LoginModule {
  /**
   *
   * @type {string}
   * @memberof LoginModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof LoginModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof LoginModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof LoginModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof LoginModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof LoginModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof LoginModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof LoginModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof LoginModule
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof LoginModule
   */
  content: string;
  /**
   *
   * @type {Link}
   * @memberof LoginModule
   */
  button: Link;
  /**
   *
   * @type {Link}
   * @memberof LoginModule
   */
  link: Link;
  /**
   *
   * @type {Placeholder}
   * @memberof LoginModule
   */
  placeholderField: Placeholder;
}

/**
 *
 * @export
 * @interface MapLocation
 */
export interface MapLocation {
  /**
   *
   * @type {number}
   * @memberof MapLocation
   */
  latitude: number;
  /**
   *
   * @type {number}
   * @memberof MapLocation
   */
  longitude: number;
}

/**
 *
 * @export
 * @interface MarkerInformation
 */
export interface MarkerInformation {
  /**
   *
   * @type {string}
   * @memberof MarkerInformation
   */
  day: string;
  /**
   *
   * @type {string}
   * @memberof MarkerInformation
   */
  opensAt: string;
  /**
   *
   * @type {string}
   * @memberof MarkerInformation
   */
  closesAt: string;
}

/**
 *
 * @export
 * @interface Markers
 */
export interface Markers {
  /**
   *
   * @type {string}
   * @memberof Markers
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Markers
   */
  displayName: string;
  /**
   *
   * @type {MapLocation}
   * @memberof Markers
   */
  location: MapLocation;
  /**
   *
   * @type {Array&lt;MarkerInformation&gt;}
   * @memberof Markers
   */
  workingHours: Array<MarkerInformation>;
  /**
   *
   * @type {string}
   * @memberof Markers
   */
  streetNameAndNumber: string;
  /**
   *
   * @type {string}
   * @memberof Markers
   */
  postalCode: string;
  /**
   *
   * @type {string}
   * @memberof Markers
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof Markers
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof Markers
   */
  fax: string;
}

/**
 *
 * @export
 * @interface MetaData
 */
export interface MetaData {
  /**
   *
   * @type {string}
   * @memberof MetaData
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof MetaData
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof MetaData
   */
  description: string;
}

/**
 *
 * @export
 * @interface ModalImage
 */
export interface ModalImage {
  /**
   *
   * @type {string}
   * @memberof ModalImage
   */
  caption: string;
  /**
   *
   * @type {string}
   * @memberof ModalImage
   */
  imageUrl: string;
}

/**
 *
 * @export
 * @interface MoreProducts
 */
export interface MoreProducts {
  /**
   *
   * @type {string}
   * @memberof MoreProducts
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof MoreProducts
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof MoreProducts
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof MoreProducts
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof MoreProducts
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof MoreProducts
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof MoreProducts
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof MoreProducts
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;RelatedProduct&gt;}
   * @memberof MoreProducts
   */
  relatedProducts: Array<RelatedProduct>;
  /**
   *
   * @type {string}
   * @memberof MoreProducts
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof MoreProducts
   */
  buttonText: string;
  /**
   *
   * @type {string}
   * @memberof MoreProducts
   */
  moreProductsLink: string;
}

/**
 *
 * @export
 * @interface NavBarModule
 */
export interface NavBarModule {
  /**
   *
   * @type {string}
   * @memberof NavBarModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof NavBarModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof NavBarModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof NavBarModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof NavBarModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof NavBarModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof NavBarModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof NavBarModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;Link&gt;}
   * @memberof NavBarModule
   */
  topLinks: Array<Link>;
  /**
   *
   * @type {Array&lt;Link&gt;}
   * @memberof NavBarModule
   */
  botLinks: Array<Link>;
  /**
   *
   * @type {string}
   * @memberof NavBarModule
   */
  first_logo: string;
  /**
   *
   * @type {string}
   * @memberof NavBarModule
   */
  second_logo: string;
}

/**
 *
 * @export
 * @interface NavbarSearchCategory
 */
export interface NavbarSearchCategory {
  /**
   *
   * @type {string}
   * @memberof NavbarSearchCategory
   */
  name: string;
  /**
   *
   * @type {Array&lt;NavbarSearchItem&gt;}
   * @memberof NavbarSearchCategory
   */
  items: Array<NavbarSearchItem>;
}

/**
 *
 * @export
 * @interface NavbarSearchItem
 */
export interface NavbarSearchItem {
  /**
   *
   * @type {string}
   * @memberof NavbarSearchItem
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof NavbarSearchItem
   */
  url: string;
}

/**
 *
 * @export
 * @interface NewsItem
 */
export interface NewsItem {
  /**
   *
   * @type {string}
   * @memberof NewsItem
   */
  image: string;
  /**
   *
   * @type {string}
   * @memberof NewsItem
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof NewsItem
   */
  link: string;
}

/**
 *
 * @export
 * @interface NewsOverviewModule
 */
export interface NewsOverviewModule {
  /**
   *
   * @type {string}
   * @memberof NewsOverviewModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof NewsOverviewModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof NewsOverviewModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof NewsOverviewModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof NewsOverviewModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof NewsOverviewModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof NewsOverviewModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof NewsOverviewModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {NewsOverviewStateModule}
   * @memberof NewsOverviewModule
   */
  state: NewsOverviewStateModule;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof NewsOverviewModule
   */
  categories: Array<string>;
}

/**
 *
 * @export
 * @interface NewsOverviewStateModule
 */
export interface NewsOverviewStateModule {
  /**
   *
   * @type {Array&lt;CardModel&gt;}
   * @memberof NewsOverviewStateModule
   */
  cards: Array<CardModel>;
  /**
   *
   * @type {number}
   * @memberof NewsOverviewStateModule
   */
  totalItems: number;
}

/**
 *
 * @export
 * @interface NewsletterModule
 */
export interface NewsletterModule {
  /**
   *
   * @type {string}
   * @memberof NewsletterModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof NewsletterModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof NewsletterModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof NewsletterModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof NewsletterModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof NewsletterModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof NewsletterModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof NewsletterModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof NewsletterModule
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof NewsletterModule
   */
  text: string;
  /**
   *
   * @type {string}
   * @memberof NewsletterModule
   */
  pictureURL: string;
  /**
   *
   * @type {Placeholder}
   * @memberof NewsletterModule
   */
  placeholderField: Placeholder;
}

/**
 *
 * @export
 * @interface NotFoundModule
 */
export interface NotFoundModule {
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof NotFoundModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof NotFoundModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof NotFoundModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof NotFoundModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  text: string;
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  backButtonText: string;
  /**
   *
   * @type {string}
   * @memberof NotFoundModule
   */
  homeButtonText: string;
}

/**
 *
 * @export
 * @interface NotYetImplemented
 */
export interface NotYetImplemented {
  /**
   *
   * @type {string}
   * @memberof NotYetImplemented
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof NotYetImplemented
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof NotYetImplemented
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof NotYetImplemented
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof NotYetImplemented
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof NotYetImplemented
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof NotYetImplemented
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof NotYetImplemented
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof NotYetImplemented
   */
  moduleName: string;
}

/**
 *
 * @export
 * @interface OurTeamCards
 */
export interface OurTeamCards {
  /**
   *
   * @type {string}
   * @memberof OurTeamCards
   */
  link: string;
  /**
   *
   * @type {string}
   * @memberof OurTeamCards
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof OurTeamCards
   */
  image: string;
  /**
   *
   * @type {string}
   * @memberof OurTeamCards
   */
  position: string;
  /**
   *
   * @type {boolean}
   * @memberof OurTeamCards
   */
  social: boolean;
}

/**
 *
 * @export
 * @interface OurTeamModule
 */
export interface OurTeamModule {
  /**
   *
   * @type {string}
   * @memberof OurTeamModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof OurTeamModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof OurTeamModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof OurTeamModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof OurTeamModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof OurTeamModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof OurTeamModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof OurTeamModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;OurTeamCards&gt;}
   * @memberof OurTeamModule
   */
  ourTeamCards: Array<OurTeamCards>;
}

/**
 *
 * @export
 * @interface Padding
 */
export interface Padding {
  /**
   *
   * @type {number}
   * @memberof Padding
   */
  mobilePadding: number;
  /**
   *
   * @type {number}
   * @memberof Padding
   */
  desktopPadding: number;
}

/**
 *
 * @export
 * @interface PageModel
 */
export interface PageModel {
  /**
   *
   * @type {string}
   * @memberof PageModel
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PageModel
   */
  route: string;
  /**
   *
   * @type {Array&lt;WordPressPostModule&gt;}
   * @memberof PageModel
   */
  wordPressPostModules: Array<WordPressPostModule>;
  /**
   *
   * @type {MetaData}
   * @memberof PageModel
   */
  metaData: MetaData;
}

/**
 *
 * @export
 * @interface Phone
 */
export interface Phone {
  /**
   *
   * @type {string}
   * @memberof Phone
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof Phone
   */
  contactName: string;
}

/**
 *
 * @export
 * @interface Placeholder
 */
export interface Placeholder {
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  companyName: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  confirmPassword: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  address: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  message: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  phoneNumber: string;
  /**
   *
   * @type {string}
   * @memberof Placeholder
   */
  language: string;
}

/**
 *
 * @export
 * @interface ProductCard
 */
export interface ProductCard {
  /**
   *
   * @type {string}
   * @memberof ProductCard
   */
  link: string;
  /**
   *
   * @type {string}
   * @memberof ProductCard
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ProductCard
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof ProductCard
   */
  image: string;
  /**
   *
   * @type {string}
   * @memberof ProductCard
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof ProductCard
   */
  subCategory: string;
}

/**
 *
 * @export
 * @interface ProductDetailHeader
 */
export interface ProductDetailHeader {
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof ProductDetailHeader
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof ProductDetailHeader
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof ProductDetailHeader
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof ProductDetailHeader
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  header: string;
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  subHeader: string;
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  body: string;
  /**
   *
   * @type {Array&lt;Link&gt;}
   * @memberof ProductDetailHeader
   */
  links: Array<Link>;
  /**
   *
   * @type {string}
   * @memberof ProductDetailHeader
   */
  backButtonText: string;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof ProductDetailHeader
   */
  listPictures: Array<string>;
  /**
   *
   * @type {ShareSocialMediaButtons}
   * @memberof ProductDetailHeader
   */
  socialMediaButtons: ShareSocialMediaButtons;
}

/**
 *
 * @export
 * @interface ProductInformation
 */
export interface ProductInformation {
  /**
   *
   * @type {string}
   * @memberof ProductInformation
   */
  title: string;
  /**
   *
   * @type {Array&lt;TabInformation&gt;}
   * @memberof ProductInformation
   */
  tabInformation: Array<TabInformation>;
}

/**
 *
 * @export
 * @interface ProductLineFilter
 */
export interface ProductLineFilter {
  /**
   *
   * @type {Array&lt;FilterOptions&gt;}
   * @memberof ProductLineFilter
   */
  quickFilterOptions: Array<FilterOptions>;
  /**
   *
   * @type {Array&lt;FilterOptions&gt;}
   * @memberof ProductLineFilter
   */
  productFilterOptions: Array<FilterOptions>;
  /**
   *
   * @type {Array&lt;NewsItem&gt;}
   * @memberof ProductLineFilter
   */
  relatedNewsItems: Array<NewsItem>;
  /**
   *
   * @type {Array&lt;Recipe&gt;}
   * @memberof ProductLineFilter
   */
  relatedRecipeItems: Array<Recipe>;
  /**
   *
   * @type {string}
   * @memberof ProductLineFilter
   */
  quickFilterTitle: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineFilter
   */
  productFilterTitle: string;
  /**
   *
   * @type {number}
   * @memberof ProductLineFilter
   */
  quickFilterMax: number;
  /**
   *
   * @type {number}
   * @memberof ProductLineFilter
   */
  productFilterMax: number;
  /**
   *
   * @type {string}
   * @memberof ProductLineFilter
   */
  showMoreButton: string;
}

/**
 *
 * @export
 * @interface ProductLineOverviewCard
 */
export interface ProductLineOverviewCard {
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewCard
   */
  link: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewCard
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewCard
   */
  image: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewCard
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewCard
   */
  buttonText: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewCard
   */
  categoryDetail: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewCard
   */
  diet: string;
}

/**
 *
 * @export
 * @interface ProductLineOverviewModule
 */
export interface ProductLineOverviewModule {
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineOverviewModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof ProductLineOverviewModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof ProductLineOverviewModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof ProductLineOverviewModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof ProductLineOverviewModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;ProductLineOverviewCard&gt;}
   * @memberof ProductLineOverviewModule
   */
  productsLine: Array<ProductLineOverviewCard>;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof ProductLineOverviewModule
   */
  categories: Array<string>;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof ProductLineOverviewModule
   */
  diets: Array<string>;
}

/**
 *
 * @export
 * @interface ProductLineSingleModule
 */
export interface ProductLineSingleModule {
  /**
   *
   * @type {string}
   * @memberof ProductLineSingleModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineSingleModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineSingleModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof ProductLineSingleModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof ProductLineSingleModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof ProductLineSingleModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof ProductLineSingleModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof ProductLineSingleModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {ProductLineFilter}
   * @memberof ProductLineSingleModule
   */
  filter: ProductLineFilter;
  /**
   *
   * @type {Array&lt;ProductCard&gt;}
   * @memberof ProductLineSingleModule
   */
  productCardList: Array<ProductCard>;
  /**
   *
   * @type {Array&lt;CategoryCard&gt;}
   * @memberof ProductLineSingleModule
   */
  categoryCardList: Array<CategoryCard>;
}

/**
 *
 * @export
 * @interface ProductOverviewSimpleModule
 */
export interface ProductOverviewSimpleModule {
  /**
   *
   * @type {string}
   * @memberof ProductOverviewSimpleModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ProductOverviewSimpleModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProductOverviewSimpleModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof ProductOverviewSimpleModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof ProductOverviewSimpleModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof ProductOverviewSimpleModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof ProductOverviewSimpleModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof ProductOverviewSimpleModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {ProductLineFilter}
   * @memberof ProductOverviewSimpleModule
   */
  filter: ProductLineFilter;
  /**
   *
   * @type {Array&lt;ProductCard&gt;}
   * @memberof ProductOverviewSimpleModule
   */
  productCardList: Array<ProductCard>;
  /**
   *
   * @type {number}
   * @memberof ProductOverviewSimpleModule
   */
  totalItems: number;
}

/**
 *
 * @export
 * @interface Recipe
 */
export interface Recipe {
  /**
   *
   * @type {Array&lt;IconLabel&gt;}
   * @memberof Recipe
   */
  label: Array<IconLabel>;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  content: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  category: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  buttonText: string;
  /**
   *
   * @type {string}
   * @memberof Recipe
   */
  link: string;
}

/**
 *
 * @export
 * @interface RecipeDetailModule
 */
export interface RecipeDetailModule {
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof RecipeDetailModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof RecipeDetailModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof RecipeDetailModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof RecipeDetailModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  bgcolor: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  subTitle: string;
  /**
   *
   * @type {HowToModel}
   * @memberof RecipeDetailModule
   */
  howTo: HowToModel;
  /**
   *
   * @type {ShareSocialMediaButtons}
   * @memberof RecipeDetailModule
   */
  socialMediaButtons: ShareSocialMediaButtons;
  /**
   *
   * @type {Array&lt;ItemRecipeInfo&gt;}
   * @memberof RecipeDetailModule
   */
  itemsRecipeInfo: Array<ItemRecipeInfo>;
  /**
   *
   * @type {Array&lt;IngredientModel&gt;}
   * @memberof RecipeDetailModule
   */
  ingredients: Array<IngredientModel>;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof RecipeDetailModule
   */
  ingredientsPics: Array<string>;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  sidebarTitle: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  buttonTextRelatedPosts: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  buttonURLRelatedPosts: string;
  /**
   *
   * @type {string}
   * @memberof RecipeDetailModule
   */
  titleRelatedPosts: string;
  /**
   *
   * @type {Array&lt;RelatedProduct&gt;}
   * @memberof RecipeDetailModule
   */
  productsRelatedPosts: Array<RelatedProduct>;
}

/**
 *
 * @export
 * @interface RecipeHeadCard
 */
export interface RecipeHeadCard {
  /**
   *
   * @type {string}
   * @memberof RecipeHeadCard
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RecipeHeadCard
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof RecipeHeadCard
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof RecipeHeadCard
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof RecipeHeadCard
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof RecipeHeadCard
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof RecipeHeadCard
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof RecipeHeadCard
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof RecipeHeadCard
   */
  amount: string;
}

/**
 *
 * @export
 * @interface RelatedLinks
 */
export interface RelatedLinks {
  /**
   *
   * @type {string}
   * @memberof RelatedLinks
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof RelatedLinks
   */
  content: string;
  /**
   *
   * @type {Link}
   * @memberof RelatedLinks
   */
  button: Link;
}

/**
 *
 * @export
 * @interface RelatedLinksModule
 */
export interface RelatedLinksModule {
  /**
   *
   * @type {string}
   * @memberof RelatedLinksModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RelatedLinksModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof RelatedLinksModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof RelatedLinksModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof RelatedLinksModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof RelatedLinksModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof RelatedLinksModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof RelatedLinksModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof RelatedLinksModule
   */
  title: string;
  /**
   *
   * @type {Array&lt;RelatedLinks&gt;}
   * @memberof RelatedLinksModule
   */
  links: Array<RelatedLinks>;
}

/**
 *
 * @export
 * @interface RelatedProduct
 */
export interface RelatedProduct {
  /**
   *
   * @type {string}
   * @memberof RelatedProduct
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProduct
   */
  amount?: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProduct
   */
  picture: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProduct
   */
  URL: string;
}

/**
 *
 * @export
 * @interface RelatedProductsSlider
 */
export interface RelatedProductsSlider {
  /**
   *
   * @type {string}
   * @memberof RelatedProductsSlider
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProductsSlider
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProductsSlider
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProductsSlider
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof RelatedProductsSlider
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof RelatedProductsSlider
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof RelatedProductsSlider
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof RelatedProductsSlider
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;RelatedProduct&gt;}
   * @memberof RelatedProductsSlider
   */
  relatedProducts: Array<RelatedProduct>;
  /**
   *
   * @type {string}
   * @memberof RelatedProductsSlider
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProductsSlider
   */
  buttonText: string;
  /**
   *
   * @type {string}
   * @memberof RelatedProductsSlider
   */
  buttonLink: string;
}

/**
 *
 * @export
 * @interface SalePointModule
 */
export interface SalePointModule {
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof SalePointModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof SalePointModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof SalePointModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof SalePointModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  content: string;
  /**
   *
   * @type {Array&lt;ImageLink&gt;}
   * @memberof SalePointModule
   */
  imageLinks: Array<ImageLink>;
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  bgcolor: string;
  /**
   *
   * @type {string}
   * @memberof SalePointModule
   */
  decor: string;
  /**
   *
   * @type {boolean}
   * @memberof SalePointModule
   */
  pattern: boolean;
  /**
   *
   * @type {Array&lt;Markers&gt;}
   * @memberof SalePointModule
   */
  markers: Array<Markers>;
  /**
   *
   * @type {Array&lt;MapLocation&gt;}
   * @memberof SalePointModule
   */
  mapcenter: Array<MapLocation>;
  /**
   *
   * @type {boolean}
   * @memberof SalePointModule
   */
  markerOpen: boolean;
}

/**
 *
 * @export
 * @interface ShareSocialMediaButtons
 */
export interface ShareSocialMediaButtons {
  /**
   *
   * @type {SocialFacebookOptions}
   * @memberof ShareSocialMediaButtons
   */
  facebook?: SocialFacebookOptions;
  /**
   *
   * @type {SocialLinkedinOptions}
   * @memberof ShareSocialMediaButtons
   */
  linkedin?: SocialLinkedinOptions;
  /**
   *
   * @type {SocialMediaSharingOptions}
   * @memberof ShareSocialMediaButtons
   */
  email?: SocialMediaSharingOptions;
  /**
   *
   * @type {SocialPinterestOptions}
   * @memberof ShareSocialMediaButtons
   */
  pinterest?: SocialPinterestOptions;
  /**
   *
   * @type {SocialTwitterOptions}
   * @memberof ShareSocialMediaButtons
   */
  twitter?: SocialTwitterOptions;
  /**
   *
   * @type {SocialWhatsappOptions}
   * @memberof ShareSocialMediaButtons
   */
  whatsapp?: SocialWhatsappOptions;
}

/**
 *
 * @export
 * @interface SignUpModule
 */
export interface SignUpModule {
  /**
   *
   * @type {string}
   * @memberof SignUpModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof SignUpModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SignUpModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof SignUpModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof SignUpModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof SignUpModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof SignUpModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof SignUpModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof SignUpModule
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SignUpModule
   */
  content: string;
  /**
   *
   * @type {Link}
   * @memberof SignUpModule
   */
  button: Link;
  /**
   *
   * @type {Link}
   * @memberof SignUpModule
   */
  link: Link;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof SignUpModule
   */
  options: Array<string>;
  /**
   *
   * @type {Placeholder}
   * @memberof SignUpModule
   */
  placeholderField: Placeholder;
}

/**
 *
 * @export
 * @interface SocialFacebookOptions
 */
export interface SocialFacebookOptions {
  /**
   *
   * @type {string}
   * @memberof SocialFacebookOptions
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof SocialFacebookOptions
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SocialFacebookOptions
   */
  hashtag: string;
}

/**
 *
 * @export
 * @interface SocialLinkedinOptions
 */
export interface SocialLinkedinOptions {
  /**
   *
   * @type {string}
   * @memberof SocialLinkedinOptions
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof SocialLinkedinOptions
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SocialLinkedinOptions
   */
  description: string;
}

/**
 *
 * @export
 * @interface SocialMediaSharingOptions
 */
export interface SocialMediaSharingOptions {
  /**
   *
   * @type {string}
   * @memberof SocialMediaSharingOptions
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof SocialMediaSharingOptions
   */
  title: string;
}

/**
 *
 * @export
 * @interface SocialPinterestOptions
 */
export interface SocialPinterestOptions {
  /**
   *
   * @type {string}
   * @memberof SocialPinterestOptions
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof SocialPinterestOptions
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SocialPinterestOptions
   */
  media: string;
}

/**
 *
 * @export
 * @interface SocialTwitterOptions
 */
export interface SocialTwitterOptions {
  /**
   *
   * @type {string}
   * @memberof SocialTwitterOptions
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof SocialTwitterOptions
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SocialTwitterOptions
   */
  via: string;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof SocialTwitterOptions
   */
  hashtags: Array<string>;
}

/**
 *
 * @export
 * @interface SocialWhatsappOptions
 */
export interface SocialWhatsappOptions {
  /**
   *
   * @type {string}
   * @memberof SocialWhatsappOptions
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof SocialWhatsappOptions
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SocialWhatsappOptions
   */
  separator: string;
}

/**
 *
 * @export
 * @interface TabInformation
 */
export interface TabInformation {
  /**
   *
   * @type {string}
   * @memberof TabInformation
   */
  information: string;
  /**
   *
   * @type {string}
   * @memberof TabInformation
   */
  detail: string;
}

/**
 *
 * @export
 * @interface TabsModule
 */
export interface TabsModule {
  /**
   *
   * @type {string}
   * @memberof TabsModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof TabsModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TabsModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof TabsModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof TabsModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof TabsModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof TabsModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof TabsModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Array&lt;string&gt;}
   * @memberof TabsModule
   */
  tabsTitle: Array<string>;
  /**
   *
   * @type {SalePointModule}
   * @memberof TabsModule
   */
  salePoints: SalePointModule;
  /**
   *
   * @type {B2BDataTab}
   * @memberof TabsModule
   */
  b2bData: B2BDataTab;
  /**
   *
   * @type {Array&lt;ProductInformation&gt;}
   * @memberof TabsModule
   */
  productInformation: Array<ProductInformation>;
  /**
   *
   * @type {BodyTextModule}
   * @memberof TabsModule
   */
  generalInformation: BodyTextModule;
}

/**
 *
 * @export
 * @interface Toggle
 */
export interface Toggle {
  /**
   *
   * @type {Array&lt;ExpandablePanel&gt;}
   * @memberof Toggle
   */
  items: Array<ExpandablePanel>;
  /**
   *
   * @type {string}
   * @memberof Toggle
   */
  title: string;
}

/**
 *
 * @export
 * @interface ToggleModule
 */
export interface ToggleModule {
  /**
   *
   * @type {string}
   * @memberof ToggleModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ToggleModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ToggleModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof ToggleModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof ToggleModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof ToggleModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof ToggleModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof ToggleModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {Toggle}
   * @memberof ToggleModule
   */
  toggle: Toggle;
}

/**
 *
 * @export
 * @interface WelcomeModule
 */
export interface WelcomeModule {
  /**
   *
   * @type {string}
   * @memberof WelcomeModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof WelcomeModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof WelcomeModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof WelcomeModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof WelcomeModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof WelcomeModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof WelcomeModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof WelcomeModule
   */
  bottomPadding?: Padding;
  /**
   *
   * @type {string}
   * @memberof WelcomeModule
   */
  headerText: string;
  /**
   *
   * @type {string}
   * @memberof WelcomeModule
   */
  bodyText: string;
  /**
   *
   * @type {string}
   * @memberof WelcomeModule
   */
  welcomeImage: string;
  /**
   *
   * @type {ImageButton}
   * @memberof WelcomeModule
   */
  mainButton1: ImageButton;
  /**
   *
   * @type {ImageButton}
   * @memberof WelcomeModule
   */
  mainButton2: ImageButton;
  /**
   *
   * @type {ImageButton}
   * @memberof WelcomeModule
   */
  smallButton1: ImageButton;
  /**
   *
   * @type {ImageButton}
   * @memberof WelcomeModule
   */
  smallButton2: ImageButton;
  /**
   *
   * @type {ImageButton}
   * @memberof WelcomeModule
   */
  smallButton3: ImageButton;
}

/**
 *
 * @export
 * @interface WordPressPostModule
 */
export interface WordPressPostModule {
  /**
   *
   * @type {string}
   * @memberof WordPressPostModule
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof WordPressPostModule
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof WordPressPostModule
   */
  topMargin: string;
  /**
   *
   * @type {string}
   * @memberof WordPressPostModule
   */
  bottomMargin: string;
  /**
   *
   * @type {Background}
   * @memberof WordPressPostModule
   */
  background?: Background;
  /**
   *
   * @type {Curve}
   * @memberof WordPressPostModule
   */
  curve?: Curve;
  /**
   *
   * @type {Padding}
   * @memberof WordPressPostModule
   */
  topPadding?: Padding;
  /**
   *
   * @type {Padding}
   * @memberof WordPressPostModule
   */
  bottomPadding?: Padding;
}

/**
 * BusinesscategoryApi - fetch parameter creator
 * @export
 */
export const BusinesscategoryApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} productLine Filter by productline
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    businessCategoryGet(productLine: string, skip: number, filter?: string, options: any = {}): FetchArgs {
      // verify required parameter 'productLine' is not null or undefined
      if (productLine === null || productLine === undefined) {
        throw new RequiredError(
          "productLine",
          "Required parameter productLine was null or undefined when calling businessCategoryGet."
        );
      }
      // verify required parameter 'skip' is not null or undefined
      if (skip === null || skip === undefined) {
        throw new RequiredError(
          "skip",
          "Required parameter skip was null or undefined when calling businessCategoryGet."
        );
      }
      const localVarPath = `/business/category`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (productLine !== undefined) {
        localVarQueryParameter["productLine"] = productLine;
      }

      if (skip !== undefined) {
        localVarQueryParameter["skip"] = skip;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * BusinesscategoryApi - functional programming interface
 * @export
 */
export const BusinesscategoryApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} productLine Filter by productline
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    businessCategoryGet(
      productLine: string,
      skip: number,
      filter?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = BusinesscategoryApiFetchParamCreator(configuration).businessCategoryGet(
        productLine,
        skip,
        filter,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * BusinesscategoryApi - factory interface
 * @export
 */
export const BusinesscategoryApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {string} productLine Filter by productline
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    businessCategoryGet(productLine: string, skip: number, filter?: string, options?: any) {
      return BusinesscategoryApiFp(configuration).businessCategoryGet(productLine, skip, filter, options)(
        fetch,
        basePath
      );
    }
  };
};

/**
 * BusinesscategoryApi - object-oriented interface
 * @export
 * @class BusinesscategoryApi
 * @extends {BaseAPI}
 */
export class BusinesscategoryApi extends BaseAPI {
  /**
   *
   * @param {} productLine Filter by productline
   * @param {} skip Skip for pagination
   * @param {} [filter] Filter by category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BusinesscategoryApi
   */
  public businessCategoryGet(productLine: string, skip: number, filter?: string, options?: any) {
    return BusinesscategoryApiFp(this.configuration).businessCategoryGet(productLine, skip, filter, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * BusinessproductsApi - fetch parameter creator
 * @export
 */
export const BusinessproductsApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} category Filter by category
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    businessProductsGet(category: string, skip: number, filter?: string, options: any = {}): FetchArgs {
      // verify required parameter 'category' is not null or undefined
      if (category === null || category === undefined) {
        throw new RequiredError(
          "category",
          "Required parameter category was null or undefined when calling businessProductsGet."
        );
      }
      // verify required parameter 'skip' is not null or undefined
      if (skip === null || skip === undefined) {
        throw new RequiredError(
          "skip",
          "Required parameter skip was null or undefined when calling businessProductsGet."
        );
      }
      const localVarPath = `/business/products`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (category !== undefined) {
        localVarQueryParameter["category"] = category;
      }

      if (skip !== undefined) {
        localVarQueryParameter["skip"] = skip;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * BusinessproductsApi - functional programming interface
 * @export
 */
export const BusinessproductsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} category Filter by category
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    businessProductsGet(
      category: string,
      skip: number,
      filter?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = BusinessproductsApiFetchParamCreator(configuration).businessProductsGet(
        category,
        skip,
        filter,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * BusinessproductsApi - factory interface
 * @export
 */
export const BusinessproductsApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {string} category Filter by category
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    businessProductsGet(category: string, skip: number, filter?: string, options?: any) {
      return BusinessproductsApiFp(configuration).businessProductsGet(category, skip, filter, options)(fetch, basePath);
    }
  };
};

/**
 * BusinessproductsApi - object-oriented interface
 * @export
 * @class BusinessproductsApi
 * @extends {BaseAPI}
 */
export class BusinessproductsApi extends BaseAPI {
  /**
   *
   * @param {} category Filter by category
   * @param {} skip Skip for pagination
   * @param {} [filter] Filter by product
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BusinessproductsApi
   */
  public businessProductsGet(category: string, skip: number, filter?: string, options?: any) {
    return BusinessproductsApiFp(this.configuration).businessProductsGet(category, skip, filter, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * CardApi - fetch parameter creator
 * @export
 */
export const CardApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by cardName
     * @param {string} [category] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cardGet(take: number, skip: number, filter?: string, category?: string, options: any = {}): FetchArgs {
      // verify required parameter 'take' is not null or undefined
      if (take === null || take === undefined) {
        throw new RequiredError("take", "Required parameter take was null or undefined when calling cardGet.");
      }
      // verify required parameter 'skip' is not null or undefined
      if (skip === null || skip === undefined) {
        throw new RequiredError("skip", "Required parameter skip was null or undefined when calling cardGet.");
      }
      const localVarPath = `/card`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (category !== undefined) {
        localVarQueryParameter["category"] = category;
      }

      if (take !== undefined) {
        localVarQueryParameter["take"] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter["skip"] = skip;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CardApi - functional programming interface
 * @export
 */
export const CardApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by cardName
     * @param {string} [category] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cardGet(
      take: number,
      skip: number,
      filter?: string,
      category?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = CardApiFetchParamCreator(configuration).cardGet(take, skip, filter, category, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * CardApi - factory interface
 * @export
 */
export const CardApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by cardName
     * @param {string} [category] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cardGet(take: number, skip: number, filter?: string, category?: string, options?: any) {
      return CardApiFp(configuration).cardGet(take, skip, filter, category, options)(fetch, basePath);
    }
  };
};

/**
 * CardApi - object-oriented interface
 * @export
 * @class CardApi
 * @extends {BaseAPI}
 */
export class CardApi extends BaseAPI {
  /**
   *
   * @param {} take How many per page
   * @param {} skip Skip for pagination
   * @param {} [filter] Filter by cardName
   * @param {} [category] Filter by category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CardApi
   */
  public cardGet(take: number, skip: number, filter?: string, category?: string, options?: any) {
    return CardApiFp(this.configuration).cardGet(take, skip, filter, category, options)(this.fetch, this.basePath);
  }
}

/**
 * DummyApi - fetch parameter creator
 * @export
 */
export const DummyApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dummyGet(options: any = {}): FetchArgs {
      const localVarPath = `/dummy`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {DummyModel} DummyModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dummyPost(DummyModel: DummyModel, options: any = {}): FetchArgs {
      // verify required parameter 'DummyModel' is not null or undefined
      if (DummyModel === null || DummyModel === undefined) {
        throw new RequiredError(
          "DummyModel",
          "Required parameter DummyModel was null or undefined when calling dummyPost."
        );
      }
      const localVarPath = `/dummy`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"DummyModel" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(DummyModel || {}) : DummyModel || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * DummyApi - functional programming interface
 * @export
 */
export const DummyApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dummyGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DummyApiFetchParamCreator(configuration).dummyGet(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @param {DummyModel} DummyModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dummyPost(DummyModel: DummyModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DummyApiFetchParamCreator(configuration).dummyPost(DummyModel, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * DummyApi - factory interface
 * @export
 */
export const DummyApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dummyGet(options?: any) {
      return DummyApiFp(configuration).dummyGet(options)(fetch, basePath);
    },
    /**
     *
     * @param {DummyModel} DummyModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dummyPost(DummyModel: DummyModel, options?: any) {
      return DummyApiFp(configuration).dummyPost(DummyModel, options)(fetch, basePath);
    }
  };
};

/**
 * DummyApi - object-oriented interface
 * @export
 * @class DummyApi
 * @extends {BaseAPI}
 */
export class DummyApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DummyApi
   */
  public dummyGet(options?: any) {
    return DummyApiFp(this.configuration).dummyGet(options)(this.fetch, this.basePath);
  }

  /**
   *
   * @param {} DummyModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DummyApi
   */
  public dummyPost(DummyModel: DummyModel, options?: any) {
    return DummyApiFp(this.configuration).dummyPost(DummyModel, options)(this.fetch, this.basePath);
  }
}

/**
 * NavbarsearchApi - fetch parameter creator
 * @export
 */
export const NavbarsearchApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} filter Filter by item name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    navbarsearchGet(filter: string, options: any = {}): FetchArgs {
      // verify required parameter 'filter' is not null or undefined
      if (filter === null || filter === undefined) {
        throw new RequiredError(
          "filter",
          "Required parameter filter was null or undefined when calling navbarsearchGet."
        );
      }
      const localVarPath = `/navbarsearch`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * NavbarsearchApi - functional programming interface
 * @export
 */
export const NavbarsearchApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} filter Filter by item name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    navbarsearchGet(filter: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = NavbarsearchApiFetchParamCreator(configuration).navbarsearchGet(filter, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * NavbarsearchApi - factory interface
 * @export
 */
export const NavbarsearchApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {string} filter Filter by item name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    navbarsearchGet(filter: string, options?: any) {
      return NavbarsearchApiFp(configuration).navbarsearchGet(filter, options)(fetch, basePath);
    }
  };
};

/**
 * NavbarsearchApi - object-oriented interface
 * @export
 * @class NavbarsearchApi
 * @extends {BaseAPI}
 */
export class NavbarsearchApi extends BaseAPI {
  /**
   *
   * @param {} filter Filter by item name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NavbarsearchApi
   */
  public navbarsearchGet(filter: string, options?: any) {
    return NavbarsearchApiFp(this.configuration).navbarsearchGet(filter, options)(this.fetch, this.basePath);
  }
}

/**
 * NewsApi - fetch parameter creator
 * @export
 */
export const NewsApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by cardName
     * @param {string} [category] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsGet(take: number, skip: number, filter?: string, category?: string, options: any = {}): FetchArgs {
      // verify required parameter 'take' is not null or undefined
      if (take === null || take === undefined) {
        throw new RequiredError("take", "Required parameter take was null or undefined when calling newsGet.");
      }
      // verify required parameter 'skip' is not null or undefined
      if (skip === null || skip === undefined) {
        throw new RequiredError("skip", "Required parameter skip was null or undefined when calling newsGet.");
      }
      const localVarPath = `/news`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (category !== undefined) {
        localVarQueryParameter["category"] = category;
      }

      if (take !== undefined) {
        localVarQueryParameter["take"] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter["skip"] = skip;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by cardName
     * @param {string} [category] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsGet(
      take: number,
      skip: number,
      filter?: string,
      category?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = NewsApiFetchParamCreator(configuration).newsGet(take, skip, filter, category, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {string} [filter] Filter by cardName
     * @param {string} [category] Filter by category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsGet(take: number, skip: number, filter?: string, category?: string, options?: any) {
      return NewsApiFp(configuration).newsGet(take, skip, filter, category, options)(fetch, basePath);
    }
  };
};

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI {
  /**
   *
   * @param {} take How many per page
   * @param {} skip Skip for pagination
   * @param {} [filter] Filter by cardName
   * @param {} [category] Filter by category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NewsApi
   */
  public newsGet(take: number, skip: number, filter?: string, category?: string, options?: any) {
    return NewsApiFp(this.configuration).newsGet(take, skip, filter, category, options)(this.fetch, this.basePath);
  }
}

/**
 * PageApi - fetch parameter creator
 * @export
 */
export const PageApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {PageModel} PageModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagePost(PageModel: PageModel, options: any = {}): FetchArgs {
      // verify required parameter 'PageModel' is not null or undefined
      if (PageModel === null || PageModel === undefined) {
        throw new RequiredError(
          "PageModel",
          "Required parameter PageModel was null or undefined when calling pagePost."
        );
      }
      const localVarPath = `/page`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"PageModel" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(PageModel || {}) : PageModel || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} route
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageRouteGet(route: string, options: any = {}): FetchArgs {
      // verify required parameter 'route' is not null or undefined
      if (route === null || route === undefined) {
        throw new RequiredError("route", "Required parameter route was null or undefined when calling pageRouteGet.");
      }
      const localVarPath = `/page/{route}`.replace(`{${"route"}}`, encodeURIComponent(String(route)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {PageModel} PageModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagePost(PageModel: PageModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = PageApiFetchParamCreator(configuration).pagePost(PageModel, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @param {string} route
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageRouteGet(route: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = PageApiFetchParamCreator(configuration).pageRouteGet(route, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {PageModel} PageModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagePost(PageModel: PageModel, options?: any) {
      return PageApiFp(configuration).pagePost(PageModel, options)(fetch, basePath);
    },
    /**
     *
     * @param {string} route
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageRouteGet(route: string, options?: any) {
      return PageApiFp(configuration).pageRouteGet(route, options)(fetch, basePath);
    }
  };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
  /**
   *
   * @param {} PageModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PageApi
   */
  public pagePost(PageModel: PageModel, options?: any) {
    return PageApiFp(this.configuration).pagePost(PageModel, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @param {} route
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PageApi
   */
  public pageRouteGet(route: string, options?: any) {
    return PageApiFp(this.configuration).pageRouteGet(route, options)(this.fetch, this.basePath);
  }
}

/**
 * ProductCardApi - fetch parameter creator
 * @export
 */
export const ProductCardApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} search search
     * @param {Array&lt;string&gt;} product product
     * @param {Array&lt;string&gt;} category category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardCategoryGet(
      search: string,
      product: Array<string>,
      category: Array<string>,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'search' is not null or undefined
      if (search === null || search === undefined) {
        throw new RequiredError(
          "search",
          "Required parameter search was null or undefined when calling productCardCategoryGet."
        );
      }
      // verify required parameter 'product' is not null or undefined
      if (product === null || product === undefined) {
        throw new RequiredError(
          "product",
          "Required parameter product was null or undefined when calling productCardCategoryGet."
        );
      }
      // verify required parameter 'category' is not null or undefined
      if (category === null || category === undefined) {
        throw new RequiredError(
          "category",
          "Required parameter category was null or undefined when calling productCardCategoryGet."
        );
      }
      const localVarPath = `/product-card/category`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (product) {
        localVarQueryParameter["product"] = product.join(COLLECTION_FORMATS["csv"]);
      }

      if (category) {
        localVarQueryParameter["category"] = category.join(COLLECTION_FORMATS["csv"]);
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} search search
     * @param {Array&lt;string&gt;} product get product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardProductsGet(search: string, product: Array<string>, options: any = {}): FetchArgs {
      // verify required parameter 'search' is not null or undefined
      if (search === null || search === undefined) {
        throw new RequiredError(
          "search",
          "Required parameter search was null or undefined when calling productCardProductsGet."
        );
      }
      // verify required parameter 'product' is not null or undefined
      if (product === null || product === undefined) {
        throw new RequiredError(
          "product",
          "Required parameter product was null or undefined when calling productCardProductsGet."
        );
      }
      const localVarPath = `/product-card/products`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (product) {
        localVarQueryParameter["product"] = product.join(COLLECTION_FORMATS["csv"]);
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {Array&lt;string&gt;} filter filter
     * @param {string} category Filter by  cateogry
     * @param {string} search search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardProductsPaginationGet(
      take: number,
      skip: number,
      filter: Array<string>,
      category: string,
      search: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'take' is not null or undefined
      if (take === null || take === undefined) {
        throw new RequiredError(
          "take",
          "Required parameter take was null or undefined when calling productCardProductsPaginationGet."
        );
      }
      // verify required parameter 'skip' is not null or undefined
      if (skip === null || skip === undefined) {
        throw new RequiredError(
          "skip",
          "Required parameter skip was null or undefined when calling productCardProductsPaginationGet."
        );
      }
      // verify required parameter 'filter' is not null or undefined
      if (filter === null || filter === undefined) {
        throw new RequiredError(
          "filter",
          "Required parameter filter was null or undefined when calling productCardProductsPaginationGet."
        );
      }
      // verify required parameter 'category' is not null or undefined
      if (category === null || category === undefined) {
        throw new RequiredError(
          "category",
          "Required parameter category was null or undefined when calling productCardProductsPaginationGet."
        );
      }
      // verify required parameter 'search' is not null or undefined
      if (search === null || search === undefined) {
        throw new RequiredError(
          "search",
          "Required parameter search was null or undefined when calling productCardProductsPaginationGet."
        );
      }
      const localVarPath = `/product-card/productsPagination`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (take !== undefined) {
        localVarQueryParameter["take"] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter["skip"] = skip;
      }

      if (filter) {
        localVarQueryParameter["filter"] = filter.join(COLLECTION_FORMATS["csv"]);
      }

      if (category !== undefined) {
        localVarQueryParameter["category"] = category;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ProductCardApi - functional programming interface
 * @export
 */
export const ProductCardApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} search search
     * @param {Array&lt;string&gt;} product product
     * @param {Array&lt;string&gt;} category category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardCategoryGet(
      search: string,
      product: Array<string>,
      category: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProductCardApiFetchParamCreator(configuration).productCardCategoryGet(
        search,
        product,
        category,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @param {string} search search
     * @param {Array&lt;string&gt;} product get product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardProductsGet(
      search: string,
      product: Array<string>,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProductCardApiFetchParamCreator(configuration).productCardProductsGet(
        search,
        product,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {Array&lt;string&gt;} filter filter
     * @param {string} category Filter by  cateogry
     * @param {string} search search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardProductsPaginationGet(
      take: number,
      skip: number,
      filter: Array<string>,
      category: string,
      search: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ProductCardApiFetchParamCreator(configuration).productCardProductsPaginationGet(
        take,
        skip,
        filter,
        category,
        search,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * ProductCardApi - factory interface
 * @export
 */
export const ProductCardApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @param {string} search search
     * @param {Array&lt;string&gt;} product product
     * @param {Array&lt;string&gt;} category category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardCategoryGet(search: string, product: Array<string>, category: Array<string>, options?: any) {
      return ProductCardApiFp(configuration).productCardCategoryGet(search, product, category, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @param {string} search search
     * @param {Array&lt;string&gt;} product get product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardProductsGet(search: string, product: Array<string>, options?: any) {
      return ProductCardApiFp(configuration).productCardProductsGet(search, product, options)(fetch, basePath);
    },
    /**
     *
     * @param {number} take How many per page
     * @param {number} skip Skip for pagination
     * @param {Array&lt;string&gt;} filter filter
     * @param {string} category Filter by  cateogry
     * @param {string} search search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productCardProductsPaginationGet(
      take: number,
      skip: number,
      filter: Array<string>,
      category: string,
      search: string,
      options?: any
    ) {
      return ProductCardApiFp(configuration).productCardProductsPaginationGet(
        take,
        skip,
        filter,
        category,
        search,
        options
      )(fetch, basePath);
    }
  };
};

/**
 * ProductCardApi - object-oriented interface
 * @export
 * @class ProductCardApi
 * @extends {BaseAPI}
 */
export class ProductCardApi extends BaseAPI {
  /**
   *
   * @param {} search search
   * @param {} product product
   * @param {} category category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductCardApi
   */
  public productCardCategoryGet(search: string, product: Array<string>, category: Array<string>, options?: any) {
    return ProductCardApiFp(this.configuration).productCardCategoryGet(search, product, category, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @param {} search search
   * @param {} product get product
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductCardApi
   */
  public productCardProductsGet(search: string, product: Array<string>, options?: any) {
    return ProductCardApiFp(this.configuration).productCardProductsGet(search, product, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @param {} take How many per page
   * @param {} skip Skip for pagination
   * @param {} filter filter
   * @param {} category Filter by  cateogry
   * @param {} search search
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductCardApi
   */
  public productCardProductsPaginationGet(
    take: number,
    skip: number,
    filter: Array<string>,
    category: string,
    search: string,
    options?: any
  ) {
    return ProductCardApiFp(this.configuration).productCardProductsPaginationGet(
      take,
      skip,
      filter,
      category,
      search,
      options
    )(this.fetch, this.basePath);
  }
}
